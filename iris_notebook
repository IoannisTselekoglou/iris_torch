{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "56d69aed",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.utils.data import Dataset\n",
    "from torch.utils.data import DataLoader\n",
    "import torch\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "5d6c7d58",
   "metadata": {},
   "outputs": [],
   "source": [
    "#create custom Dataset\n",
    "encoder = LabelEncoder()\n",
    "class CustomDataset(Dataset):\n",
    "    def __init__(self):\n",
    "        data = pd.read_csv(\"./dataset/IRIS.csv\", sep=\",\", header=1)\n",
    "        self.y = encoder.fit_transform(data.iloc[::1,4]) # map 0,1,2 to labels\n",
    "        self.x = torch.from_numpy(data.iloc[:,:-1].values).float() # classes converted from df to tensor\n",
    "        self.len = len(data) \n",
    "    def __len__(self):\n",
    "        return self.len\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        return self.x[idx], self.y[idx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "1d03dd56",
   "metadata": {},
   "outputs": [],
   "source": [
    "#load dataset and split in training and testset\n",
    "dataset = CustomDataset()\n",
    "train_dataset, test_dataset = torch.utils.data.random_split(dataset, [0.8, 0.2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "1e6852b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "batch_size = 10\n",
    "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True) \n",
    "test_loader = DataLoader(test_dataset, batch_size=batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "f763b536",
   "metadata": {},
   "outputs": [],
   "source": [
    "#create NN-Network\n",
    "#4 inputs and 3  outputs \n",
    "class NeuralNetwork(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.linear_stack =  nn.Sequential(\n",
    "         nn.Linear(4,128),\n",
    "         nn.ReLU(),\n",
    "         nn.Linear(128,64),\n",
    "         nn.ReLU(),\n",
    "         nn.Linear(64,3)\n",
    "         )\n",
    "    def forward(self, x):\n",
    "        logits = self.linear_stack(x)\n",
    "        return logits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "ad83603b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[tensor([[6.7000, 3.1000, 4.4000, 1.4000],\n",
       "         [6.5000, 3.0000, 5.5000, 1.8000],\n",
       "         [4.9000, 3.1000, 1.5000, 0.1000],\n",
       "         [6.7000, 3.3000, 5.7000, 2.5000],\n",
       "         [5.5000, 2.4000, 3.8000, 1.1000],\n",
       "         [6.0000, 2.7000, 5.1000, 1.6000],\n",
       "         [6.1000, 2.9000, 4.7000, 1.4000],\n",
       "         [4.9000, 3.0000, 1.4000, 0.2000],\n",
       "         [5.4000, 3.7000, 1.5000, 0.2000],\n",
       "         [6.3000, 2.3000, 4.4000, 1.3000]]),\n",
       " tensor([1, 2, 0, 2, 1, 1, 1, 0, 0, 1])]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr = 0.01\n",
    "model = NeuralNetwork()\n",
    "optim = torch.optim.Adam(model.parameters(), lr=lr)\n",
    "#optim = torch.optim.SGD(model.parameters(), lr=lr, momentum=0.9)\n",
    "loss = torch.nn.CrossEntropyLoss()\n",
    "\n",
    "next(iter(train_loader))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "0a8f6daa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " epoch: 100/1000, loss: 0.7453175187110901\n",
      "\n",
      " epoch: 200/1000, loss: 0.11550193479731863\n",
      "\n",
      " epoch: 300/1000, loss: 0.10289594598856439\n",
      "\n",
      " epoch: 400/1000, loss: 0.09079051319312509\n",
      "\n",
      " epoch: 500/1000, loss: 0.08833129146888749\n",
      "\n",
      " epoch: 600/1000, loss: 0.08667028534785821\n",
      "\n",
      " epoch: 700/1000, loss: 0.08149761736809427\n",
      "\n",
      " epoch: 800/1000, loss: 0.09837388034251177\n",
      "\n",
      " epoch: 900/1000, loss: 0.09310443310659756\n",
      "\n",
      " epoch: 1000/1000, loss: 0.09168043074542413\n"
     ]
    }
   ],
   "source": [
    "n_iters = 1000\n",
    "steps = n_iters/10\n",
    "LOSS = []\n",
    "for epochs in range(n_iters):  \n",
    "    for i,(inputs, labels) in enumerate(train_loader):\n",
    "        optim.zero_grad()\n",
    "        out = model(inputs)\n",
    "        l = loss(out, labels)\n",
    "        l.backward()\n",
    "        optim.step()\n",
    "    LOSS.append(l.item())\n",
    "    if epochs%steps == 0:\n",
    "        print(f\"\\n epoch: {int(epochs+steps)}/{n_iters}, loss: {sum(LOSS)/len(LOSS)}\")\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "f29d4bb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        12\n",
      "           1       1.00      0.88      0.93         8\n",
      "           2       0.90      1.00      0.95         9\n",
      "\n",
      "    accuracy                           0.97        29\n",
      "   macro avg       0.97      0.96      0.96        29\n",
      "weighted avg       0.97      0.97      0.97        29\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Eval model\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "Y_pred = []\n",
    "Y_hat = []\n",
    "with torch.no_grad():\n",
    "    for i,(inputs, labels) in enumerate(test_loader):\n",
    "        out = model(inputs.float())\n",
    "        _, out_hat = torch.max(out,1)\n",
    "        Y_pred.append(out_hat)\n",
    "        Y_hat.append(labels)\n",
    "          \n",
    "Y_pred = torch.cat(Y_pred)\n",
    "Y_hat = torch.cat(Y_hat)\n",
    "Y_hat.cpu().detach().numpy()\n",
    "Y_pred.cpu().detach().numpy()\n",
    "\n",
    "#Y_hat,Y_pred\n",
    "print(classification_report(y_true=Y_hat, y_pred=Y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "ff69a0f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([ 74.5165, -42.4948, -58.8890], grad_fn=<AddBackward0>)"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#test manual witch rnd datapoint:\n",
    "output_test = model(torch.tensor([4.5,2.3,1.3,0.3]))\n",
    "output_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "bbbeac4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"./dataset/IRIS.csv\", sep=\",\")\n",
    "y = df.iloc[::1,4]\n",
    "encoder.fit_transform(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "e2a61d52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0)"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output_test = torch.argmax(output_test)\n",
    "flower = output_test.item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "4d536f73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Iris-setosa'"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "encoder.inverse_transform([flower]).item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f1c62a7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
